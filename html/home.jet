<!doctype html>
<html lang="en">
<head>
    <title>Golang Websocket Chat demo</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-rbsA2VBKQhggwzxH7pPCaAqO46MgnOM80zW1RWuH61DGLwZJEdK2Kadq2F9CUG65" crossorigin="anonymous">
    <style>
        .chatbox{
            outline:1px solid silver;
            min-height: 160px;
            padding:0.5em;
        }
    </style>
</head>

<body>
    <div class="container">
        <div class="row">
            <div class="col">
                <h1 class="mt-3">Golang websocket</h1>
                <hr>
            </div>
        </div>
        <div class="row">
            <div class="col-md-6">
                <h3>Chat</h3>
                <div class="form-group">
                    <label for="username">Username:</label>
                    <input type="text" name="username" id="username" class="form-control" autocomplete="off">
                </div>
                <div class="form-group">
                    <label for="username">Message:</label>
                    <input type="text" name="message" id="message" class="form-control" autocomplete="off">
                </div>

                <hr>
                <a href="javascript:void(0);" class="btn btn-outline-secondary" id="sendBtn">Send Message</a>

                <input type="hidden" name="action" id="action">

                <div id="status" class="mt-2 float-end"></div>
                <hr>

                <div id="output" class="chatbox"></div>
            </div>
            <div class="col-md-4">
                <h3>Who's online</h3>

                <ul id="onlineUsers"></ul>
            </div>
        </div>
    </div>
</body>
<script src="/static/reconnecting-websocket.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-kenU1KFdBIe4zVF0s0G1M5b4hcpxyD9F7jL+jjXkk+Q2h455rYXK/7HAuoJl+0I4" crossorigin="anonymous"></script>
<script>
    let socket = null;
    let reconnectInterval = null;
    let o = document.getElementById("output");
    let userField = document.getElementById("username")
    let messageField = document.getElementById("message")
    let statusDiv = document.getElementById("status");

    window.onbeforeunload = function (){
        console.log("Leaving")
        let jsonData={};
        jsonData.action = "left";
        socket.send(JSON.stringify(jsonData))
    }


    document.addEventListener("DOMContentLoaded",function (){

        socket = new ReconnectingWebSocket("ws://127.0.0.1:8080/ws",null,{debug:true,reconnectInterval:100});

        const offline = `<span class="badge bg-danger">Disconnected</span>`;
        const online = `<span class="badge bg-success">Connected</span>`;
        socket.onopen = () =>{
            console.log("Succesfully connected!");
            statusDiv.innerHTML = online;
        }

        socket.onclose = (event) =>{
            console.log("Connection closed");
            statusDiv.innerHTML = offline;
        }

        socket.onerror = error =>{
            console.log("There was an error");
            statusDiv.innerHTML = offline;
        }


        socket.onmessage = msg =>{
            // console.log(msg);
            // let j = JSON.parse(msg.data);
            // console.log(j);
            let data = JSON.parse(msg.data);
            console.log("Action is",data.action);
            switch(data.action){
                case "list_users":
                    let ul = document.getElementById("onlineUsers");
                    //Remove all in list
                    while(ul.firstChild) ul.removeChild(ul.firstChild);

                    if(data.connected_users.length > 0){
                        data.connected_users.forEach(function(item){
                            let li = document.createElement("li");
                            li.appendChild(document.createTextNode(item))
                            ul.appendChild(li);
                        })
                    }
                    break;
                case "broadcast":
                    o.innerHTML = o.innerHTML + data.message + "<br>";
                    break;
            }
        }

        userField.addEventListener("change",function(){
            let jsonData = {};
            jsonData["action"] = "username";
            jsonData["username"] = this.value;
            console.log(this.value);

            socket.send(JSON.stringify(jsonData));
        })

        messageField.addEventListener("keydown",function (event){
            if(event.code==="Enter"){
                if(!socket){
                    console.log("No connection!");
                    return false;
                }
                event.preventDefault()
                event.stopPropagation()

                 if(userField.value == "" || messageField.value == ""){
                    alert("Fill out user and message");
                    return false;
                 }
                 sendMessage();
            }
        })
        document.getElementById("sendBtn").addEventListener("click",function (){
            if(userField.value == "" || messageField.value == ""){
                alert("Fill out user and message");
                return false;
            }
            sendMessage();
        })
    })

    function sendMessage(){
        let jsonData = {};
        jsonData.action = "broadcast";
        jsonData.username = userField.value;
        jsonData.message = messageField.value;
        socket.send(JSON.stringify(jsonData));
        messageField.value = "";
    }
</script>
</html>